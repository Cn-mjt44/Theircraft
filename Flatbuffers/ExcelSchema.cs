// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyData
{

using global::System;
using global::FlatBuffers;

public enum Type : sbyte
{
 WORKER = 0,
 MANAGER = 1,
};

public struct Data : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Data __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Age { get { return __p.bb.GetInt(__p.bb_pos + 0); } }

  public static Offset<Data> CreateData(FlatBufferBuilder builder, int Age) {
    builder.Prep(4, 4);
    builder.PutInt(Age);
    return new Offset<Data>(builder.Offset);
  }
};

public struct Worker : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Worker GetRootAsWorker(ByteBuffer _bb) { return GetRootAsWorker(_bb, new Worker()); }
  public static Worker GetRootAsWorker(ByteBuffer _bb, Worker obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Worker __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public Type Type { get { int o = __p.__offset(6); return o != 0 ? (Type)__p.bb.GetSbyte(o + __p.bb_pos) : Type.MANAGER; } }
  public Data? Info { get { int o = __p.__offset(8); return o != 0 ? (Data?)(new Data()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartWorker(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, Type type) { builder.AddSbyte(1, (sbyte)type, 1); }
  public static void AddInfo(FlatBufferBuilder builder, Offset<Data> infoOffset) { builder.AddStruct(2, infoOffset.Value, 0); }
  public static Offset<Worker> EndWorker(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Worker>(o);
  }
  public static void FinishWorkerBuffer(FlatBufferBuilder builder, Offset<Worker> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedWorkerBuffer(FlatBufferBuilder builder, Offset<Worker> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
